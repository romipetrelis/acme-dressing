// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Acme.Dressing.Tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class GettingDressedFeature : Xunit.IClassFixture<GettingDressedFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "DressingFeature.feature"
#line hidden
        
        public GettingDressedFeature()
        {
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Getting Dressed", "\tIn order to leave the house  \r\n\tAs a Pajama Wearer in my house   \r\n\tI want to dr" +
                    "ess in temperature-appropriate clothes", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void SetFixture(GettingDressedFeature.FixtureData fixtureData)
        {
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.TheoryAttribute()]
        [Xunit.TraitAttribute("FeatureTitle", "Getting Dressed")]
        [Xunit.TraitAttribute("Description", "Process dressing commands")]
        [Xunit.TraitAttribute("Category", "integration")]
        [Xunit.InlineDataAttribute("good HOT", "HOT", "8, 6, 4, 2, 1, 7", "Removing PJs, shorts, shirt, sunglasses, sandals, leaving house", new string[0])]
        [Xunit.InlineDataAttribute("good COLD", "COLD", "8, 6, 3, 4, 2, 5, 1, 7", "Removing PJs, pants, socks, shirt, hat, jacket, boots, leaving house", new string[0])]
        [Xunit.InlineDataAttribute("Only1PieceOfEachTypeOfClothingMayBePutOn", "HOT", "8, 6, 6", "Removing PJs, shorts, fail", new string[0])]
        [Xunit.InlineDataAttribute("YouCannotPutOnSocksWhenItIsHot", "HOT", "8, 6, 3", "Removing PJs, shorts, fail", new string[0])]
        [Xunit.InlineDataAttribute("YouCannotPutOnJacketWhenItIsHot", "HOT", "8, 5", "Removing PJs, fail", new string[0])]
        [Xunit.InlineDataAttribute("YouCannotLeaveTheHouseUntilAllItemsOfClothingAreOn", "COLD", "8, 6, 3, 4, 2, 5, 7", "Removing PJs, pants, socks, shirt, hat, jacket, fail", new string[0])]
        [Xunit.InlineDataAttribute("PajamasMustBeTakenOffBeforeAnythingElseCanBePutOn", "COLD", "6", "fail", new string[0])]
        [Xunit.InlineDataAttribute("SocksMustBePutOnBeforeFootwear", "COLD", "8, 1, 3", "Removing PJs, boots, fail", new string[0])]
        [Xunit.InlineDataAttribute("PantsMustBePutOnBeforeFootwear", "HOT", "8, 1, 6", "Removing PJs, sandals, fail", new string[0])]
        [Xunit.InlineDataAttribute("ShirtMustBePutOnBeforeHeadwear", "HOT", "8, 2, 4", "Removing PJs, sunglasses, fail", new string[0])]
        [Xunit.InlineDataAttribute("ShirtMustBePutOnBeforeJacket", "COLD", "8, 5, 4", "Removing PJs, jacket, fail", new string[0])]
        [Xunit.InlineDataAttribute("bad temp type", "MILD", "8", "fail", new string[0])]
        [Xunit.InlineDataAttribute("bad command", "COLD", "9", "fail", new string[0])]
        public virtual void ProcessDressingCommands(string description, string temperaturetype, string commands, string result, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "integration"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Process dressing commands", @__tags);
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
testRunner.Given(string.Format("a temperature type {0}", temperaturetype), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
testRunner.And(string.Format("a CSV command list {0}", commands), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
testRunner.When("I process the commands", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 11
testRunner.Then(string.Format("I should get the expected result {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                GettingDressedFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                GettingDressedFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
